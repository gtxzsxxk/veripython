FIRRTL version 3.3.0
circuit DecoupledGcd :
  module DecoupledGcd : @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 26:7]
    input clock : Clock
    input reset : UInt<1>
    input input : { flip ready : UInt<1>, valid : UInt<1>, bits : { value1 : UInt<16>, value2 : UInt<16>}} @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 27:17]
    output output : { flip ready : UInt<1>, valid : UInt<1>, bits : { value1 : UInt<16>, value2 : UInt<16>, gcd : UInt<16>}} @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 28:18]

    reg xInitial : UInt, clock @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 30:24]
    reg yInitial : UInt, clock @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 31:24]
    reg x : UInt, clock @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 32:24]
    reg y : UInt, clock @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 33:24]
    regreset busy : UInt<1>, clock, reset, UInt<1>(0h0) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 34:28]
    regreset resultValid : UInt<1>, clock, reset, UInt<1>(0h0) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 35:28]
    node _input_ready_T = eq(busy, UInt<1>(0h0)) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 37:18]
    connect input.ready, _input_ready_T @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 37:15]
    connect output.valid, resultValid @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 38:16]
    invalidate output.bits.gcd @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 39:15]
    invalidate output.bits.value2 @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 39:15]
    invalidate output.bits.value1 @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 39:15]
    when busy : @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 41:15]
      node _T = gt(x, y) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 42:12]
      when _T : @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 42:17]
        node _x_T = sub(x, y) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 43:14]
        node _x_T_1 = tail(_x_T, 1) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 43:14]
        connect x, _x_T_1 @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 43:9]
      else :
        node _y_T = sub(y, x) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 45:14]
        node _y_T_1 = tail(_y_T, 1) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 45:14]
        connect y, _y_T_1 @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 45:9]
      node _T_1 = eq(x, UInt<1>(0h0)) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 47:12]
      node _T_2 = eq(y, UInt<1>(0h0)) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 47:25]
      node _T_3 = or(_T_1, _T_2) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 47:20]
      when _T_3 : @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 47:34]
        node _T_4 = eq(x, UInt<1>(0h0)) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 48:14]
        when _T_4 : @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 48:23]
          connect output.bits.gcd, y @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 49:25]
        else :
          connect output.bits.gcd, x @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 51:25]
        connect output.bits.value1, xInitial @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 54:26]
        connect output.bits.value2, yInitial @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 55:26]
        connect resultValid, UInt<1>(0h1) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 56:19]
        node _T_5 = and(output.ready, resultValid) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 58:25]
        when _T_5 : @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 58:41]
          connect busy, UInt<1>(0h0) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 59:14]
          connect resultValid, UInt<1>(0h0) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 60:21]
    else :
      when input.valid : @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 64:23]
        connect input.ready, UInt<1>(0h1) @[src/main/scala/chisel3/util/Decoupled.scala 76:20]
        connect x, input.bits.value1 @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 66:9]
        connect y, input.bits.value2 @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 67:9]
        connect xInitial, input.bits.value1 @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 68:16]
        connect yInitial, input.bits.value2 @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 69:16]
        connect busy, UInt<1>(0h1) @[H:\\code\\chisel-temp-play\\src\\main\\scala\\gcd\\DecoupledGCD.scala 70:12]
